{"version":3,"sources":["imgs/blush.PNG","components/nav.jsx","components/imgBox.jsx","components/landing.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Nav","state","isOpen","toggleCollapse","setState","className","color","dark","expand","onClick","this","id","navbar","left","active","to","React","Component","Landing","imgProp","blush","classProp","altProp","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,mC,gMCuD5BC,E,4MA9CXC,MAAQ,CACJC,QAAQ,G,EAGVC,eAAiB,WACf,EAAKC,SAAS,CAAEF,QAAS,EAAKD,MAAMC,U,uDAIpC,OACI,oCACK,kBAAC,IAAD,KAEG,kBAAC,IAAD,CAAWG,UAAU,MAAMC,MAAM,SAASC,MAAI,EAACC,OAAO,MAClD,kBAAC,IAAD,KACE,4BAAQH,UAAU,aAAlB,oBAEF,kBAAC,IAAD,CAAkBI,QAASC,KAAKP,iBAChC,kBAAC,IAAD,CAAaQ,GAAG,kBAAkBT,OAAQQ,KAAKT,MAAMC,OAAQU,QAAM,GACjE,kBAAC,IAAD,CAAcC,MAAI,GAChB,kBAAC,IAAD,CAAYC,QAAM,GAChB,kBAAC,IAAD,CAAYC,GAAG,MAAf,UAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,MAAf,YAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,MAAf,0B,GA7BZC,IAAMC,W,kBCLHD,IAAMC,UCgBZC,MAZf,WACI,OACI,oCACI,yBAAKb,UAAU,WACX,4BAAQc,QAASC,IAAOC,UAAW,SAAUC,QAAS,UACtD,yBAAKjB,UAAU,WACf,wBAAIA,UAAU,YAAd,sBCeDkB,MAbf,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,OAChB,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCRAmB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfgC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCvFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDSnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,kBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,kBAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC/B/BE,I","file":"static/js/main.36ff47ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blush.cd84e77f.PNG\";","import React from 'react'\r\n\r\n//3rd party components\r\nimport {BrowserRouter} from 'react-router-dom';\r\n//desktop nav\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse } from \"mdbreact\";\r\n\r\nclass Nav extends React.Component {\r\n\r\n    state = {\r\n        isOpen: false\r\n      };\r\n      \r\n      toggleCollapse = () => {\r\n        this.setState({ isOpen: !this.state.isOpen });\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                 <BrowserRouter>\r\n     \r\n                    <MDBNavbar className='nav' color=\"indigo\" dark expand=\"lg\">\r\n                        <MDBNavbarBrand>\r\n                          <strong className=\"home-text\">Katiana Studios</strong>\r\n                        </MDBNavbarBrand>\r\n                        <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n                        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n                          <MDBNavbarNav left>\r\n                            <MDBNavItem active>\r\n                              <MDBNavLink to=\"#!\">About</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                              <MDBNavLink to=\"#!\">Gallery</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                              <MDBNavLink to=\"#!\">Work with Me</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            \r\n                          </MDBNavbarNav>\r\n                        </MDBCollapse>\r\n                    </MDBNavbar>\r\n \r\n                </BrowserRouter>\r\n\r\n\r\n              \r\n\r\n            </>\r\n         );\r\n    }\r\n   \r\n}\r\n\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nclass imgBox extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className={this.props.classProp}>\r\n                <img src={this.props.imgProp} alt={this.props.altProp}/>\r\n                {/* <img src={smile} alt=\"panda\"/> */}\r\n            </div>\r\n                  \r\n        );\r\n    }\r\n}\r\n\r\nexport default imgBox;","import React from 'react'\r\n//design assets\r\nimport blush from './../imgs/blush.PNG';\r\n// import smile from './../imgs/smile.PNG';\r\nimport imgBox from '../components/imgBox';\r\n\r\nfunction Landing (){\r\n    return(\r\n        <>\r\n            <div className=\"landing\">\r\n                <imgBox imgProp={blush} classProp={'imgbox'} altProp={'panda'}/>\r\n                <div className=\"shadow\"></div>\r\n                <h1 className='kstudios'>Katiana Studios</h1>\r\n            </div>\r\n        </>\r\n    ); \r\n}\r\n\r\nexport default Landing;","import React from 'react';\nimport Nav from './components/nav';\nimport './App.sass';\n\n//design assets\n// import aww from './imgs/aww.PNG';\n// import kissy from './imgs/kissy.PNG';\n// import panda from './imgs/panda.PNG';\n// import snapchat from './imgs/snapchat.png';\n// import insta from './imgs/insta.png';\n\n//custom components\nimport Landing from './components/landing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"nav\">\n        <Nav/>\n      </header>\n      <Landing/>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport'mdbreact/dist/css/mdb.css';\nimport './App.sass';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}